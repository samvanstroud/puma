:py:mod:`puma.histogram`
========================

.. py:module:: puma.histogram

.. autoapi-nested-parse::

   Histogram plot functions.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   puma.histogram.Histogram
   puma.histogram.HistogramPlot




.. py:class:: Histogram(values: numpy.ndarray, weights: numpy.ndarray = None, ratio_group: str = None, flavour: str = None, add_flavour_label: bool = True, histtype: str = 'step', **kwargs)

   Bases: :py:obj:`puma.plot_base.PlotLineObject`

   Histogram class storing info about histogram and allows to calculate ratio w.r.t
   other histograms.

   Initialise properties of histogram curve object.

   :param values: Input data for the histogram
   :type values: np.ndarray
   :param weights: Weights for the input data. Has to be an array of same length as the input
                   data with a weight for each entry. If not specified, weight 1 will be given
                   to each entry. The uncertainties are calculated as the square root of the
                   squared weights (for each bin separately). By default None.
   :type weights: np.ndarray, optional
   :param ratio_group: Name of the ratio group this histogram is compared with. The ratio group
                       allows you to compare different groups of histograms within one plot.
                       By default None
   :type ratio_group: str, optional
   :param flavour: If set, the correct colour and a label prefix will be extracted from
                   `puma.utils.global_config` set for this histogram.
                   Allowed values are e.g. "bjets", "cjets", "ujets", "bbjets", ...
                   By default None
   :type flavour: str, optional
   :param add_flavour_label: Set to False to suppress the automatic addition of the flavour label prefix
                             in the label of the curve (i.e. "$b$-jets" in the case of b-jets).
                             This is ignored if `flavour` is not set. By default True
   :type add_flavour_label: bool, optional
   :param histtype: `histtype` parameter which is handed to matplotlib.hist() when plotting the
                    histograms. Supported values are "bar", "barstacked", "step", "stepfilled".
                    By default "step"
   :type histtype: str, optional
   :param \*\*kwargs: Keyword arguments passed to `puma.plot_base.PlotLineObject`
   :type \*\*kwargs: kwargs

   :raises ValueError: If input data is not of type np.ndarray or list
   :raises ValueError: If weights are specified but have different length as the input values

   .. py:method:: divide(other)

      Calculate ratio between two class objects.

      :param other: Second histogram object to calculate ratio with
      :type other: histogram class

      :returns: * *np.ndarray* -- Ratio
                * *np.ndarray* -- Ratio error

      :raises ValueError: If binning is not identical between 2 objects
      :raises ValueError: If hist attribute is not set for one of the two histograms
      :raises ValueError: If bin_edges attribute is not set for one of the two histograms



.. py:class:: HistogramPlot(bins=40, bins_range: tuple = None, discrete_vals: list = None, norm: bool = True, logy: bool = False, bin_width_in_ylabel: bool = False, underoverflow: bool = False, **kwargs)

   Bases: :py:obj:`puma.plot_base.PlotBase`

   Histogram plot class

   histogram plot properties

   :param bins: If bins is an int, it defines the number of equal-width bins in the given
                range. If bins is a sequence, it defines a monotonically increasing array
                of bin edges, including the rightmost edge, allowing for non-uniform
                bin widths (like in numpy.histogram). By default 40
   :type bins: int or numpy.ndarray or list, optional
   :param bins_range: Tuple of two floats, specifying the range for the binning. If bins_range is
                      specified and bins is an integer, equal-width bins from bins_range[0] to
                      bins_range[1] are used for the histogram (like in numpy.histogram).
                      By default None
   :type bins_range: tuple, optional
   :param discrete_vals: List of values if a variable only has discrete values. If discrete_vals is
                         specified only the bins containing these values are plotted.
                         By default None.
   :type discrete_vals: list, optional
   :param norm: Specify if the histograms are normalised, this means that histograms are
                divided by the total numer of counts. Therefore, the sum of the bin counts
                is equal to one, but NOT the area under the curve, which would be
                sum(bin_counts * bin_width). By default True.
   :type norm: bool, optional
   :param logy: Set log scale on y-axis, by default False.
   :type logy: bool, optional
   :param bin_width_in_ylabel: Specify if the bin width should be added to the ylabel, by default False
   :type bin_width_in_ylabel: bool, optional
   :param underoverflow: Option to include under- and overflow values in outermost bins.
   :type underoverflow: bool, optional
   :param \*\*kwargs: Keyword arguments from `puma.PlotObject`
   :type \*\*kwargs: kwargs

   :raises ValueError: If n_ratio_panels > 1

   .. py:method:: add(histogram: object, key: str = None, reference: bool = False)

      Adding histogram object to figure.

      :param histogram: Histogram curve
      :type histogram: Histogram class
      :param key: Unique identifier for histogram, by default None
      :type key: str, optional
      :param reference: If this histogram is used as reference for ratio calculation, by default
                        False
      :type reference: bool, optional

      :raises KeyError: If unique identifier key is used twice


   .. py:method:: set_reference(key: str)

      Setting the reference histogram curves used in the ratios

      :param key: Unique identifier of histogram object
      :type key: str


   .. py:method:: plot(**kwargs)

      Plotting curves. This also generates the bins of the histograms that are
      added to the plot. Plot objects are drawn in the same order as they were added
      to the plot.

      :param \*\*kwargs: Keyword arguments passed to matplotlib.axes.Axes.hist()
      :type \*\*kwargs: kwargs

      :returns: matplotlib Line2D object
      :rtype: Line2D

      :raises ValueError: If specified bins type is not supported.


   .. py:method:: get_discrete_values(elem: object)

      Get discrete values of a variable and adjust the
      bins accordingly

      :param elem: Histogram we want to calculate the bins containing discrete values for
      :type elem: histogram class

      :returns: **bins** -- Recalculated bins including only the discrete values
      :rtype: numpy.ndarray

      :raises ValueError: If the bin width is larger than 1 such that potentially not
          all discrete values are in a seperate bin
      :raises ValueError: If the number of bins is set to 1 such that no values can be
          distinguished


   .. py:method:: get_reference_histo(histo)

      Get reference histogram from list of references

      :param histo: Histogram we want to calculate the ratio for
      :type histo: puma.histogram.Histogram

      :returns: **reference_histo_name** -- Identifier of the corresponding reference histogram
      :rtype: str, int

      :raises ValueError: If no reference histo was found or multiple matches.


   .. py:method:: plot_ratios()

      Plotting ratio histograms.

      :raises ValueError: If no reference histogram is defined


   .. py:method:: add_bin_width_to_ylabel()

      Adds the bin width to the ylabel of a histogram plot. If the bin with is
      smaller than 0.01, scientific notation will be used.

      :raises ValueError: If plotting_done is False (therefore `bins` is not yet calculated)


   .. py:method:: draw(labelpad: int = None)

      Draw figure.

      :param labelpad: Spacing in points from the axes bounding box including
                       ticks and tick labels, by default "ratio"
      :type labelpad: int, optional




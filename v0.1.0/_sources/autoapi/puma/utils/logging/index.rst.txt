:py:mod:`puma.utils.logging`
============================

.. py:module:: puma.utils.logging

.. autoapi-nested-parse::

   Configuration for logger of puma.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   puma.utils.logging.CustomFormatter



Functions
~~~~~~~~~

.. autoapisummary::

   puma.utils.logging.get_log_level
   puma.utils.logging.initialise_logger
   puma.utils.logging.set_log_level



Attributes
~~~~~~~~~~

.. autoapisummary::

   puma.utils.logging.logger


.. py:class:: CustomFormatter(fmt=None, datefmt=None, style='%', validate=True)

   Bases: :py:obj:`logging.Formatter`

   Logging Formatter to add colours and count warning / errors using implementation
   from
   https://stackoverflow.com/questions/384076/how-can-i-color-python-logging-output

   Initialize the formatter with specified format strings.

   Initialize the formatter either with the specified format string, or a
   default as described above. Allow for specialized date formatting with
   the optional datefmt argument. If datefmt is omitted, you get an
   ISO8601-like (or RFC 3339-like) format.

   Use a style parameter of '%', '{' or '$' to specify that you want to
   use one of %-formatting, :meth:`str.format` (``{}``) formatting or
   :class:`string.Template` formatting in your format string.

   .. versionchanged:: 3.2
      Added the ``style`` parameter.

   .. py:attribute:: grey
      :annotation: = [38;21m

      

   .. py:attribute:: yellow
      :annotation: = [33;21m

      

   .. py:attribute:: green
      :annotation: = [32;21m

      

   .. py:attribute:: red
      :annotation: = [31;21m

      

   .. py:attribute:: bold_red
      :annotation: = [31;1m

      

   .. py:attribute:: reset
      :annotation: = [0m

      

   .. py:attribute:: debugformat
      :annotation: = %(asctime)s - %(levelname)s:%(name)s: %(message)s (%(filename)s:%(lineno)d)

      

   .. py:attribute:: date_format
      :annotation: = %(levelname)s:%(name)s: %(message)s

      

   .. py:attribute:: FORMATS
      

      

   .. py:method:: format(record)

      Format the specified record as text.

      The record's attribute dictionary is used as the operand to a
      string formatting operation which yields the returned string.
      Before formatting the dictionary, a couple of preparatory steps
      are carried out. The message attribute of the record is computed
      using LogRecord.getMessage(). If the formatting string uses the
      time (as determined by a call to usesTime(), formatTime() is
      called to format the event time. If there is exception information,
      it is formatted using formatException() and appended to the message.



.. py:function:: get_log_level(level: str)

   Get logging levels with string key.

   :param level: Log level as string.
   :type level: str

   :returns: logging object with log level info
   :rtype: logging level

   :raises ValueError: if non-valid option is given


.. py:function:: initialise_logger(log_level: str = None)

   Initialise.

   :param log_level: logging level defining the verbose level. Accepted values are:
                     CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET, by default None
                     If the log_level is not set, it will
   :type log_level: str, optional

   :returns: logger object with new level set
   :rtype: logger


.. py:function:: set_log_level(puma_logger, log_level: str)

   Setting log level.

   :param puma_logger: logger object
   :type puma_logger: logger
   :param log_level: logging level corresponding CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET
   :type log_level: str


.. py:data:: logger
   

   


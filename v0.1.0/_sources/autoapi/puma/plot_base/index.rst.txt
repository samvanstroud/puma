:py:mod:`puma.plot_base`
========================

.. py:module:: puma.plot_base

.. autoapi-nested-parse::

   Plotting bases for specialised plotting.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   puma.plot_base.PlotLineObject
   puma.plot_base.PlotObject
   puma.plot_base.PlotBase




Attributes
~~~~~~~~~~

.. autoapisummary::

   puma.plot_base.LINE_SPACING


.. py:data:: LINE_SPACING
   :annotation: = 1.3

   

.. py:class:: PlotLineObject

   Base data class defining properties of a plot object.

   :param xmin: Minimum value of the x-axis, by default None
   :type xmin: float, optional
   :param xmax: Maximum value of the x-axis, by default None
   :type xmax: float, optional
   :param colour: colour of the object, by default None
   :type colour: str, optional
   :param label: label of object, by default None
   :type label: str, optional
   :param linestyle: linestyle following numpy style, by default None
   :type linestyle: str, optional
   :param alpha: Value for visibility of the plot lines, by default None
   :type alpha: float, optional
   :param marker: Marker that is used in the plot. For example an x.
                  By default None
   :type marker: str, optional
   :param markersize: Size of the marker. By default None
   :type markersize: int, optional
   :param markeredgewidth: Edge width of the marker. By default None
   :type markeredgewidth: int, optional
   :param is_marker: Bool, to give info about if this is a marker or a line.
                     By default None
   :type is_marker: bool, optional

   .. py:attribute:: xmin
      :annotation: :float

      

   .. py:attribute:: xmax
      :annotation: :float

      

   .. py:attribute:: colour
      :annotation: :str

      

   .. py:attribute:: label
      :annotation: :str

      

   .. py:attribute:: linestyle
      :annotation: :str

      

   .. py:attribute:: linewidth
      :annotation: :str

      

   .. py:attribute:: alpha
      :annotation: :float

      

   .. py:attribute:: marker
      :annotation: :str

      

   .. py:attribute:: markersize
      :annotation: :int

      

   .. py:attribute:: markeredgewidth
      :annotation: :int

      

   .. py:attribute:: is_marker
      :annotation: :bool

      


.. py:class:: PlotObject

   Data base class defining properties of a plot object.

   :param title: Title of the plot, by default ""
   :type title: str, optional
   :param draw_errors: Draw statistical uncertainty on the lines, by default True
   :type draw_errors: bool, optional
   :param xmin: Minimum value of the x-axis, by default None
   :type xmin: float, optional
   :param xmax: Maximum value of the x-axis, by default None
   :type xmax: float, optional
   :param ymin: Minimum value of the y-axis, by default None
   :type ymin: float, optional
   :param ymax: Maximum value of the y-axis, by default None
   :type ymax: float, optional
   :param ymin_ratio_1: Set the lower y limit of the first ratio subplot, by default None.
   :type ymin_ratio_1: float, optional
   :param ymax_ratio_1: Set the upper y limit of the first ratio subplot, by default None.
   :type ymax_ratio_1: float, optional
   :param ymin_ratio_2: Set the lower y limit of the second ratio subplot, by default None.
   :type ymin_ratio_2: float, optional
   :param ymax_ratio_2: Set the upper y limit of the second ratio subplot, by default None.
   :type ymax_ratio_2: float, optional
   :param y_scale: Scaling up the y axis, e.g. to fit the ATLAS Tag. Applied if ymax not defined,
                   by default 1.3
   :type y_scale: float, optional
   :param logy: Set log of y-axis of main panel, by default True
   :type logy: bool, optional
   :param xlabel: Label of the x-axis, by default None
   :type xlabel: str, optional
   :param ylabel: Label of the y-axis, by default None
   :type ylabel: str, optional
   :param ylabel_ratio_1: Label of the y-axis in the first ratio plot, by default "Ratio"
   :type ylabel_ratio_1: str, optional
   :param ylabel_ratio_2: Label of the y-axis in the second ratio plot, by default "Ratio"
   :type ylabel_ratio_2: str, optional
   :param label_fontsize: Used fontsize in label, by default 12
   :type label_fontsize: int, optional
   :param fontsize: Used fontsize, by default 10
   :type fontsize: int, optional
   :param n_ratio_panels: Amount of ratio panels between 0 and 2, by default 0
   :type n_ratio_panels: int, optional
   :param vertical_split: Set to False if you would like to split the figure horizonally. If set to
                          True the figure is split vertically (e.g for pie chart). By default False.
   :type vertical_split: bool
   :param figsize: Tuple of figure size `(width, height)` in inches, by default (8, 6)
   :type figsize: (float, float), optional
   :param dpi: dpi used for plotting, by default 400
   :type dpi: int, optional
   :param grid: Set the grid for the plots.
   :type grid: bool, optional
   :param leg_fontsize: Fontsize of the legend, by default 10
   :type leg_fontsize: int, optional
   :param leg_loc: Position of the legend in the plot, by default "upper right"
   :type leg_loc: str, optional
   :param leg_ncol: Number of legend columns, by default 1
   :type leg_ncol: int, optional
   :param apply_atlas_style: Apply ATLAS style for matplotlib, by default True
   :type apply_atlas_style: bool, optional
   :param use_atlas_tag: Use the ATLAS Tag in the plots, by default True
   :type use_atlas_tag: bool, optional
   :param atlas_first_tag: First row of the ATLAS tag (i.e. the first row is "ATLAS <atlas_first_tag>"),
                           by default "Simulation Internal"
   :type atlas_first_tag: str, optional
   :param atlas_second_tag: Second row of the ATLAS tag, by default ""
   :type atlas_second_tag: str, optional
   :param atlas_fontsize: Fontsize of ATLAS label, by default 10
   :type atlas_fontsize: float, optional
   :param atlas_vertical_offset: Vertical offset of the ATLAS tag, by default 7
   :type atlas_vertical_offset: float, optional
   :param atlas_horizontal_offset: Horizontal offset of the ATLAS tag, by default 8
   :type atlas_horizontal_offset: float, optional
   :param atlas_brand: `brand` argument handed to atlasify. If you want to remove it just use an empty
                       string or None, by default "ATLAS"
   :type atlas_brand: str, optional
   :param plotting_done: Bool that indicates if plotting is done. Only then `atlasify()` can be called,
                         by default False
   :type plotting_done: bool

   .. py:attribute:: title
      :annotation: :str = 

      

   .. py:attribute:: draw_errors
      :annotation: :bool = True

      

   .. py:attribute:: xmin
      :annotation: :float

      

   .. py:attribute:: xmax
      :annotation: :float

      

   .. py:attribute:: ymin
      :annotation: :float

      

   .. py:attribute:: ymax
      :annotation: :float

      

   .. py:attribute:: ymin_ratio_1
      :annotation: :float

      

   .. py:attribute:: ymax_ratio_1
      :annotation: :float

      

   .. py:attribute:: ymin_ratio_2
      :annotation: :float

      

   .. py:attribute:: ymax_ratio_2
      :annotation: :float

      

   .. py:attribute:: y_scale
      :annotation: :float = 1.3

      

   .. py:attribute:: logy
      :annotation: :bool = True

      

   .. py:attribute:: xlabel
      :annotation: :str

      

   .. py:attribute:: ylabel
      :annotation: :str

      

   .. py:attribute:: ylabel_ratio_1
      :annotation: :str = Ratio

      

   .. py:attribute:: ylabel_ratio_2
      :annotation: :str = Ratio

      

   .. py:attribute:: label_fontsize
      :annotation: :int = 12

      

   .. py:attribute:: fontsize
      :annotation: :int = 10

      

   .. py:attribute:: n_ratio_panels
      :annotation: :int = 0

      

   .. py:attribute:: vertical_split
      :annotation: :bool = False

      

   .. py:attribute:: figsize
      :annotation: :tuple

      

   .. py:attribute:: dpi
      :annotation: :int = 400

      

   .. py:attribute:: grid
      :annotation: :bool = True

      

   .. py:attribute:: leg_fontsize
      :annotation: :int

      

   .. py:attribute:: leg_loc
      :annotation: :str = upper right

      

   .. py:attribute:: leg_ncol
      :annotation: :int = 1

      

   .. py:attribute:: apply_atlas_style
      :annotation: :bool = True

      

   .. py:attribute:: use_atlas_tag
      :annotation: :bool = True

      

   .. py:attribute:: atlas_first_tag
      :annotation: :str = Simulation Internal

      

   .. py:attribute:: atlas_second_tag
      :annotation: :str = 

      

   .. py:attribute:: atlas_fontsize
      :annotation: :int

      

   .. py:attribute:: atlas_vertical_offset
      :annotation: :float = 7

      

   .. py:attribute:: atlas_horizontal_offset
      :annotation: :float = 8

      

   .. py:attribute:: atlas_brand
      :annotation: :str = ATLAS

      

   .. py:attribute:: plotting_done
      :annotation: :bool = False

      

   .. py:method:: __post_init__()

      Check for allowed values.

      :raises ValueError: if n_ratio_panels not in [0, 1, 2]


   .. py:method:: __check_figsize()

      Check `figsize`

      :raises ValueError: if shape of `figsize` is not a tuple or list with length 2



.. py:class:: PlotBase(**kwargs)

   Bases: :py:obj:`PlotObject`

   Base class for plotting

   Initialise class

   :param \*\*kwargs: kwargs from `plot_object`
   :type \*\*kwargs: kwargs

   .. py:method:: initialise_figure(sub_plot_index: int = 5)

      Initialising matplotlib.figure.Figure for different scenarios depending on how
      many ratio panels are requested.

      :param sub_plot_index: indicates for the scenario with one ratio how large the upper and lower
                             panels are, by default 5
      :type sub_plot_index: int, optional


   .. py:method:: draw_vlines(vlines_xvalues: list, vlines_label_list: list = None, vlines_line_height_list: list = None, same_height: bool = False, colour: str = '#920000', fontsize: int = 10)

      Drawing working points in plot

      :param vlines_xvalues: List of working points x values to draw
      :type vlines_xvalues: list
      :param vlines_label_list: List with labels for the vertical lines. Must be the same
                                order as the vlines_xvalues. If None, the xvalues * 100 will be
                                used as labels. By default None
      :type vlines_label_list: list, optional
      :param vlines_line_height_list: List with the y height of the vertical lines in percent of the
                                      upper plot (0 is bottom, 1 is top). Must be the same
                                      order as the vlines_xvalues and the labels. By default None
      :type vlines_line_height_list: list, optional
      :param same_height: working point lines on same height, by default False
      :type same_height: bool, optional
      :param colour: colour of the vertical line, by default "#920000"
      :type colour: str, optional
      :param fontsize: Fontsize of the vertical line text. By default 10.
      :type fontsize: int, optional


   .. py:method:: set_title(title: str = None, **kwargs)

      Set title of top panel.

      :param title: title of top panel, if None using the value form the class variables,
                    by default None
      :type title: str, optional
      :param \*\*kwargs: kwargs passed to `matplotlib.axes.Axes.set_title()`
      :type \*\*kwargs: kwargs


   .. py:method:: set_logy(force: bool = False)

      Set log scale of y-axis of main panel.

      :param force: forcing logy even if class variable is False, by default False
      :type force: bool, optional


   .. py:method:: set_y_lim()

      Set limits of y-axis.


   .. py:method:: set_ylabel(ax_mpl, label: str = None, align_right: bool = True, **kwargs)

      Set y-axis label.

      :param ax_mpl: matplotlib axis object
      :type ax_mpl: matplotlib.axes.Axes
      :param label: x-axis label, by default None
      :type label: str, optional
      :param align_right: alignment of y-axis label, by default True
      :type align_right: bool, optional
      :param \*\*kwargs: kwargs passed to `matplotlib.axes.Axes.set_ylabel()`
      :param kwargs: kwargs passed to `matplotlib.axes.Axes.set_ylabel()`


   .. py:method:: set_xlabel(label: str = None, **kwargs)

      Set x-axis label.

      :param label: x-axis label, by default None
      :type label: str, optional
      :param \*\*kwargs: kwargs passed to `matplotlib.axes.Axes.set_xlabel()`
      :type \*\*kwargs: kwargs


   .. py:method:: set_tick_params(labelsize: int = None, **kwargs)

      Set x-axis label.

      :param labelsize: label size of x- and y- axis ticks, by default None
                        if None then using global fontsize
      :type labelsize: int, optional
      :param \*\*kwargs: kwargs passed to `matplotlib.axes.Axes.set_xlabel()`
      :type \*\*kwargs: kwargs


   .. py:method:: set_xlim(xmin: float = None, xmax: float = None, **kwargs)

      Set limits of x-axis

      :param xmin: min of x-axis, by default None
      :type xmin: float, optional
      :param xmax: max of x-axis, by default None
      :type xmax: float, optional
      :param \*\*kwargs: kwargs passed to `matplotlib.axes.Axes.set_xlim()`
      :type \*\*kwargs: kwargs


   .. py:method:: savefig(plot_name: str, transparent: bool = False, dpi: int = None, **kwargs)

      Save plot to disk.

      :param plot_name: file name of the plot
      :type plot_name: str
      :param transparent: if plot transparent, by default True
      :type transparent: bool, optional
      :param dpi: dpi for plotting, by default 400
      :type dpi: int, optional
      :param \*\*kwargs: kwargs passed to `matplotlib.figure.Figure.savefig()`
      :type \*\*kwargs: kwargs


   .. py:method:: tight_layout(**kwargs)

      abstract function of matplotlib.figure.Figure.tight_layout

      :param \*\*kwargs: kwargs from `matplotlib.figure.Figure.tight_layout()`
      :type \*\*kwargs: kwargs


   .. py:method:: atlasify(use_tag: bool = True, force: bool = False)

      Apply ATLAS style to all axes using the atlasify package

      :param use_tag: If False, ATLAS style will be applied but no tag will be put on the plot.
                      If True, the tag will be put on as well, by default True
      :type use_tag: bool, optional
      :param force: Force ATLAS style also if class variable is False, by default False
      :type force: bool, optional


   .. py:method:: make_legend(handles: list, ax_mpl: matplotlib.axis, labels: list = None, **kwargs)

      Drawing legend on axis.

      :param handles: list of matplotlib.lines.Line2D object returned when plotting
      :type handles: list
      :param ax_mpl: matplotlib.axis object where the legend should be plotted
      :type ax_mpl: axis
      :param labels: plot labels. If None, the labels are extracted from the `handles`.
                     By default None
      :type labels: list, optional
      :param \*\*kwargs: kwargs which can be passed to matplotlib axis
      :type \*\*kwargs: kwargs


   .. py:method:: set_ratio_label(ratio_panel: int, label: str)

      Associate the rejection class to a ratio panel

      :param ratio_panel: ratio panel either 1 or 2
      :type ratio_panel: int
      :param label: y-axis label of the ratio panel
      :type label: str

      :raises ValueError: if requested ratio panels and given ratio_panel do not match.


   .. py:method:: initialise_plot()

      Calls other methods which are usually used when plotting



